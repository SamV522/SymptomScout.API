// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SymptomScout.API.Persistence;

#nullable disable

namespace SymptomScout.API.Migrations
{
    [DbContext(typeof(SymptomScoutDbContext))]
    [Migration("20230621081756_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SymptomScout.Shared.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosisId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("SymptomScout.Shared.Models.DiagnosisSymptom", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<int>("DiagnosisSymptomId")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.HasIndex("DiagnosisId", "SymptomId")
                        .IsUnique();

                    b.ToTable("DiagnosisSymptom");
                });

            modelBuilder.Entity("SymptomScout.Shared.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymptomId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("SymptomScout.Shared.Models.DiagnosisSymptom", b =>
                {
                    b.HasOne("SymptomScout.Shared.Models.Diagnosis", "Diagnosis")
                        .WithMany("DiagnosisSymptoms")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SymptomScout.Shared.Models.Symptom", "Symptom")
                        .WithMany("DiagnosisSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("SymptomScout.Shared.Models.Diagnosis", b =>
                {
                    b.Navigation("DiagnosisSymptoms");
                });

            modelBuilder.Entity("SymptomScout.Shared.Models.Symptom", b =>
                {
                    b.Navigation("DiagnosisSymptoms");
                });
#pragma warning restore 612, 618
        }
    }
}
